import PrePost from "../model/Post";

export const PrePostDataList: PrePost[] = [
  {
    id: 102,
    title: "평범한 3년차 개발자의 회고글",
    postDescription: "쉽지 않았던 1년. 생각보다 한게 많다.",
    content:
      " 나는 학점을 잘 받는거에 집중하는 평범한 대학생이었다. 컴퓨터 관련 학과를 전공했어도, 취업의 길은 다양했기에 개발자만을 꿈꾸지 않았다. 그렇게 시간은 어느새 4학년 1학기가 끝나가고 있었고, 곧이어 개발자를 목표로 삼은 계기를 마주하게 된다.\n 4학년의 마지막 학기를 인턴으로 대신할 수 있는 제도가 있었다. 인정해주는 학점 자체체는 적었지만, 1학년때부터 성실하게 학점을 꽉꽉 채워 들어서 인턴에 도전해볼 수 있었다. 평소에 재밌게 공부했던 전공 중 하나인 개발 분야로 지원했고, 서류 및 면접 전형 끝에풀스택 개발자로 합류하게 되었다.\n 회사에서 실제 업무를 맡기지는 않았지만, 여러가지 미션들을 수행하며 발표하는 것이 업무였다. 실무를 접해본다는 생각으로 최선을 다했다. 그 결과 채용 전환 오퍼가 왔지만, 더 체계적으로 웹 개발을 준비해보고 싶다는 생각에 다음을 기약했다.\n 이후로는 프론트엔드 개발에 몰두하게 된다. 백엔드에도 흥미가 있었지만, 프론트엔드 개발은 취미생활 하는것 만큼 시간이 잘갔다. 백엔드가 없으면 서비스가 없고, 프론트엔드가 없으면 서비스를 이용할 수 있는 유저가 없다는 말이 있다. 유저가 사용하기 쉬운 UI/UX를 구성하기 위해 기획 및 디자인과 소통하고, 유저에게 더 좋은 경험을 선사하기위해 최적화를 하며, 백엔드 개발자와 합을 맞춰나가는 과정이 즐거웠던 것 같다.",
    author: "HyunHo Lee",
    likes: 55,
    comment: 3,
    tags: ["회고", "추억"],
    thumbnail: "/example1.jpg",
    createdDate: new Date(2024, 11, 16),
  },
  {
    id: 99,
    title: "나의 GitHub Copilot 활용법 & Tip (feat. Me)",
    postDescription: "빠퇴를 돕는 14가지 Github Copilot 활용 Tip",
    content: `요즘 생성형 AI의 상승세가 미쳤습니다.
개발자들에겐 코딩 어시스턴트 형태의 AI도 많이 쓰이고 있는데요
많이 언급되는건 GitHub Copilot, Cursor AI, JetBrains AI, Amazon Q 정도가 있습니다.

다만 이런 코딩 어시스턴트 형태의 AI를 쓸 때,
이런 생각해보지 않으셨나요?

AI가 짜준 코드는 믿을 수 없다.
AI와 코딩하다 보면 내 지식이 퇴화할 것 같다.
어차피 사람이 최종 검토해야하는데 그게 더 힘들다.
저도 똑같이 했던 생각이고, 어느 정도 사실(?)이기도 합니다.

그래서 코딩 어시스턴트 AI를 언제 어떻게 쓰는 것이 가장 안심할 수 있는지 제 경험을 적어봤습니다.
그리고 제가 개인적으로 유용하게 사용하고 있는 유즈케이스를 소개합니다.

가장 먼저 유명해진 GitHub Copilot을 다뤄보고자 합니다.

이 글은 IntelliJ 기반 IDE, Spring, JPA 스택을 쓰는 백엔드 개발자를 중심으로 작성되었지만, 혹시 VSCode를 주로 사용하셔도 문제 없습니다!

IntelliJ에서 되는 것이면 VSCode에서도 무조건 될 것이기 때문입니다.
(GitHub Copilot은 IntelliJ 보다 VSCode 지원을 훨씬 빠르게 하고 있고, IntelliJ에는 없는 기능도 많은 편입니다.)`,
    author: "숑숑",
    likes: 38,
    comment: 3,
    tags: ["github", "ai"],
    thumbnail: "/example2.jpg",
    createdDate: new Date(2024, 10, 24),
  },
  {
    id: 42,
    title: "월 유지비 1$ 미만으로 마참내 안죽는 요단강 익스프레스",
    postDescription: "요단강 익스프레스 정상영업 합니다.",
    content: `TL;DR
https://yodangang.express
k8s 클러스터: RPi * 3, x86 VM * 2
각각의 클러스터는 지리적으로 20km 이상 떨어져있음
Tailscale VPN을 이용
CNPG를 이용해 PostgreSQL의 HA를 구성
Redis Sentinel을 이용해 Redis HA를 구성
kube-system의 모든 deployment를 HA 구성
이론상 단 하나의 노드만 살아남아도 서비스는 건재함
Google Cloud - Cloud Storage에 컨텐츠와 DB 백업
이렇게 되기까지 2년동안 많은 시행착오가 있었음
왠만한 사고에도 서비스에 장애가 생기지 않았으면 해서 여기까지 오게 됨
목차
어케핸ㄴ노
어떻게 구성했나?
Tailscale
Kubernetes 노드 구성
서비스 구성
CNPG
Redis
근데 진짜 안죽나?
라즈베리파이는 종종 번갈아가며 죽음
다만 어제 한 번 장애가 있었음
여담
라즈베리파이 구매한건 돈 아니냐?
인터넷 비용이랑 전기세 무시하냐?
ISP는 각각 다른걸 쓰나?
돈을 쓰면 제가 했던 고생을 안해도 됩니다.
여기까지 오는데 정말 고생을 많이 했습니다.`,
    author: "지상 최강의 개발자",
    likes: 33,
    comment: 11,
    tags: ["유지"],
    thumbnail: "/example3.jpg",
    createdDate: new Date(2024, 11, 5),
  },
  {
    id: 55,
    title: "[번역] 리액트 19 업그레이드 가이드",
    postDescription: "",
    content:
      "리액트 19에 추가된 개선 사항들은 일부 호환성이 깨지는 변경사항이 동반되지만, 최대한 원활한 업그레이드가 되도록 노력했으며 대부분의 앱에는 영향을 미치지 않을 것으로 예상됩니다.참고사항 리액트 18.3이 배포되었습니다. 리액트 19로의 업그레이드를 더 쉽게 하기 위해, 18.2와 동일하지만 지원 중단 예정인 API에 대한 경고와 리액트 19를 사용하기 위해 필요한 변경사항들이 추가된 react@18.3 버전을 배포했습니다. 리액트 19로 업그레이드하기 전에 먼저 리액트 18.3으로 업그레이드하여 잠재적인 문제를 파악하시기를 권장합니다. 18.3의 변경사항 목록은 릴리스 노트를 참조하세요.",
    author: "eunbinn",
    likes: 25,
    comment: 0,
    tags: ["리액트 19", "마이그레이션"],
    thumbnail: "/example1.jpg",
    createdDate: new Date(2024, 11, 22),
  },
  {
    id: 37,
    title: "2달만에 카카오벤처스 그만두고 이직한 여고생 개발자",
    postDescription: "야 너도 할 수 있어",
    content: `안죽었어요 일단 살아있습니다.
올해 5월 카카오벤처스 투자사인 모 회사에 합격하여 9월부터 현장실습생 신분으로 회사를 다니게 되었습니다. 결론적으론 10월 말에.. 그만두었습니다. (정확히말하면 그만두려고 말하려다가 회사에서 먼저 그만하자고 얘기하심)

과거의 저는 취업 전 이렇게 생각하였습니다.

아 나도 3학년만 되면 모든걸 뚱땅뚱땅 만들고(아님) 취업하고(아님) 인생 피는겨~!!(아님) 얄루!!!!

이딴 생각을 한 과거의 나.. 신속하게 목숨 하늘에 반납하길

제친구들만봐도 원해서 한 복교 / 재정난에 의한 복교 / 회사 내부사정에 의한 복교 등 복교를 정말 많이 하더라구요
그중 아마 제가 첫번째는 아니지만 나름 먼저 복교한 사람 중 한명일겁니다.

저렇게 취업만 하면 개처럼 구를것 처럼 굴던 제가 왜 복교를 생각했는지 한글자 한글자눌러 작성해보겟습니다.

*복교: 학교로 돌아감

1. 성급한 취업
성급했습니다.
취업설명회를 들었을 때, 재직중인 선배께서도 급하게 현장면접을 보고 들어갔다고 하셨습니다.
저 또한 "오 끌리누 ㅋㅋ" 하고 들어갔기도 하고 회사에 대해 아는거라곤 현장에서 들었던 극히 적은 정보였습니다.

그리고 현장면접 프로세스도 일종의 서류, 코딩테스트, 과제, 심도있는 기술질문 등등 존재하지 않았고 최소한의 정말 간단한 면접 과정이였기 때문에 어릴때 부터 말을 잘 하던 저의 경우 붙을 수 밖에 없는 과정이였습니다.

취업자의 입장에선 쉽게 취업하기 때문에 좋아"보이지만" 서로를 잘 모르는 상태에서 입사해봤자 득볼건 1도 없습니다.

// 제 취업 프로세스를 코드로 표현해보았습니다 ㅎ
try {
  final isPassed = true; // 왜냐면 전 어릴때부터 말을 좀 잘했어요 발표 면접 체질
    if (!isPassed) {
      throw Exception('불합격');
    }
  print('합격');
} catch (e) {
  print('불합격 : $e');
}
2. 맞지 않는 기술스택
저는 원래 서버개발자였습니다. 2학년때 까지 서버를 하다 환멸이 나서 프론트로 바꾸게 되었는데 그 계기가 Flutter였습니다.
Flutter를 우연히 알게되어 혼자 뚱땅뚱땅 만지고 있었는데 너무 재밌어서... 너무 빠르고 쉬워서... 사랑하게 되었습니다..
사실 api싸개였다가 이젠 명세서 받아먹기만해서 기분좋음

애초에 그 회사에서 걸었던 조건은 "React / Vue.js 둘 중 하나" 였습니다. 하지만 전 그렇게 간절하지도 않았기에 면접연습을 해보자 라는 취지로 면접을 봤습니다. 면접 도중 리액트, 뷰 둘다 사용해본적 없다고 플러터를 사용한다고 얘기도 하였습니다. 그 상황에서 붙어버린거죠

근데 붙은 이상 뭐 해야죠...
Vue.js / Next.js를 공부해오라는 안내를 받고 공부를 시작했습니다.`,
    author: "김현지",
    likes: 18,
    comment: 15,
    tags: ["카카오"],
    thumbnail: "/example2.jpg",
    createdDate: new Date(2024, 11, 29),
  },
  {
    id: 123,
    title: "우아한 테크 코스 7기 최종 합격 후기",
    postDescription: "누군가에게 도움이 될 수 있길 바라며..",
    content: `우아한테크코스
사실 최종 코딩테스트를 잘 보지 못해서 기대하지 않았는데 합격한 걸 보니깐 지원서 + 프리코스 소감문이 큰 비중을 차지한 것 같다.(지원서도 그렇게 잘 쓰지는 못했던 것 같은데 어떻게 합격한거지..?)

나도 지원서를 작성할 때 이전 기수 분들의 합격 후기에서 많은 도움을 받았고, 개발 실력 없이 글쓰기로만 합격한 사람으로서 다른 분들께 조그만한 도움이라도 되고자 글을 작성하게 되었다.

지원서 작성
이번에 지원서를 따로 첨삭받지는 않았지만 부트캠프할 때 커리어 코치를 맡아주신 지석민 코치님께 이력서, 지원서 작성하는 방법을 배웠던게 많은 도움이 되었고, 우아한테크코스에서 추구하는 방향, 키워드 위주로 작성했던 것 같다.

글 쓰기 방법
우아한테크코스는 글자수가 적은 편은 아니라고 생각해서 글을 작성할 때 읽는 사람 위주로 가독성과 재밌게 읽을 수 있게끔 작성하려고 노력했다.

일단 글자 수 생각하지 않고 적고싶은 내용들 다 적기
다 적은 후 전하고 싶은 핵심 메세지를 구분하고 불필요한 문법을 제거하면 글자 수 문제는 해결할 수 있다.
온전한 내 경험, 생각, 이야기로 글 구성하기(제 3자의 내용은 최대한 빼기)
ex) 멘토님께서 ~~한 피드백을 주셔서(X) ➔ 피드백 수용도 좋은 주제지만 온전한 내 경험을 작성하는 것이 더 진정성이 있고 흥미있는 주제가 나올 가능성이 높다.
추상적이지 않고 구체적으로 설명하기(명확한 의도 드러내기)
ex) 좋은 개발자가 되기 위해 여러 노력을 했습니다.(X) ➔ 어떤 노력들을 했는지 구체적으로 작성
검토관이 되었다고 생각하고 읽어보기
내가 작성한 글이 지루하지 않고 술술 잘 읽히는지, 읽으면서 궁금증이 드는 부분은 없는지 확인해보기
개행 추가하기
개행이 글자 수 1자를 차지하지만 가독성의 이점이 글자 수 1자를 차지하는 것보다 훨씬 크다.`,
    author: "우혁",
    likes: 22,
    comment: 2,
    tags: ["우테코"],
    thumbnail: "/example3.jpg",
    createdDate: new Date(2024, 11, 30),
  },
  {
    id: 607,
    title:
      "항해 플러스 프론트엔드 후기(1주차) - 프레임워크 없이 SPA를 구현해 보자",
    postDescription: "네...? 프레임워크 없이 SPA를 구현해 보라고요?",
    content: `항해 플러스 프론트엔드 4기에 합류하다
오랜 고민 끝에 재직자를 위한 부트캠프, 항해 플러스 4기에 합류하게 되었다.

항해는 이미 개발자 양성 부트캠프로 널리 알려진 곳이다.

특히 주목할 만한 점은, 현직 주니어 개발자들의 성장을 위한 특화된 과정도 운영하고 있다는 것이다.

부트캠프답게 교육 과정은 상당히 강도 높다고 한다.

매일 집-회사-항해의 루틴만 반복해야 할 만큼 과제의 난이도가 만만치 않다는 이야기를 듣고 처음에는 망설였다.

하지만 퇴근 후의 달콤한 휴식과 맥주 한잔도 미뤄두고 이 과정을 선택한 이유는 단 하나,

탄탄한 프로그래밍 실력을 갖춘 진정한 개발자로 거듭나고 싶었기 때문이다.

합류를 결심한 계기
벨로그에 여러 차례 기록했듯이, 나는 올해 많은 프로젝트를 진행하며 흥미로운 결과물들을 만들었다.

덕분에 개발자 커뮤니티에서 어느 정도 이름을 알리게 되었다.

좋은 채용 기회도 여러 번 찾아왔지만, 매번 탈락의 쓴잔을 마셔야 했다. 그 이유는 명확했다. 실무 역량과 프로그래밍 기초 지식의 부족이었다.

내 깃허브 저장소의 프로젝트 코드들을 들여다보면, 의도한 바는 알 수 있지만 체계가 없다는 것이 한눈에 보인다.

결과물 만들기에 급급해 코드 퀄리티는 신경 쓸 겨를도 없었고, 사실 그럴만한 능력도 부족했다.

새로운 결과물을 만드는 것은 자신 있었지만, 개발자로서 장기적인 성장을 좌우하는 기초 소양이 부족하다는 사실이 늘 마음 한켠에 걸림돌로 남아있었다.

혼자 공부를 시작하려 해도 무엇을 어떻게 해야 할지 갈피를 잡기 어려웠고, 꾸준히 이어나갈 만한 의지도 부족했다.

적절한 강제성과 명확한 가이드라인이 있는 프로그램이 있다면 잘 따라갈 수 있을 텐데...

이런 고민을 하던 차에 마침내 발견하게 되었다.

내 필요에 완벽하게 부합하는 주니어 개발자를 위한 부트캠프, 항해 플러스를...!`,
    author: "허욤이",
    likes: 19,
    comment: 7,
    tags: [],
    thumbnail: "/example1.jpg",
    createdDate: new Date(2024, 11, 24),
  },
  {
    id: 432,
    title: "[TOP 10] 개발자들이 많이 읽은 아티클 모음 - 12월 3주차",
    postDescription:
      "웹뷰 통합에 대한 고민이 있는 개발자에게 유용한 정보입니다. 웹뷰는 네이티브 앱과 웹 콘텐츠를 연결하여 개발 효율성을 높이는 도구입니다. 여기어때 앱은 파편화된 웹뷰를 통합하여 코드 일관성을 유지하고 개발 속도를 향상시켰습니다.",
    content: `01. 앱과 웹의 연결고리 : 여기어때 통합 WebView 구축기
🙋 추천 이유
웹뷰 통합에 대한 고민이 있는 개발자에게 유용한 정보입니다.
✅ 간단 요약
웹뷰는 네이티브 앱과 웹 콘텐츠를 연결하여 개발 효율성을 높이는 도구입니다.
여기어때 앱은 파편화된 웹뷰를 통합하여 코드 일관성을 유지하고 개발 속도를 향상시켰습니다.
브릿지 방식을 통해 앱과 웹 간의 데이터 교환을 원활하게 하여 협업 효율성을 높였습니다.
https://oneoneone.kr/content/1ed918fc?utm_source=velog_weekly

02. @use-funnel 개발기 #1: 왜 기존 라이브러리를 두고 새로 만들었나?
🙋 추천 이유
새로운 상태 관리 라이브러리를 개발하려는 분들에게 유용한 경험담입니다.
✅ 간단 요약
기존 라이브러리의 한계와 문제점을 분석하여 새로운 라이브러리 @use-funnel을 개발하게 된 배경을 설명합니다.
퍼널 상태 관리의 복잡성을 해결하기 위해 팀원들과의 논의와 협업 과정을 공유합니다.
오픈소스 공개 후 사용자 피드백을 통해 라이브러리가 발전하는 과정을 소개합니다.
https://oneoneone.kr/content/c68e391d?utm_source=velog_weekly`,
    author: "일일일",
    likes: 35,
    comment: 6,
    tags: [],
    thumbnail: "/example2.jpg",
    createdDate: new Date(2024, 11, 19),
  },
  {
    id: 72,
    title: "겜린더 출시 후기",
    postDescription: "근데 이제 디자이너 친구를 곁들인... 1인 개발 후기",
    content: `게임이 언제 출시하는지 사이트 들어가고 유튜브로 일일이 찾으셨나요?
겜린더로 한 번에 찾고 달력에 저장하세요!

📋 스팀, 플레이스테이션, 엑스박스, 닌텐도 스위치의 출시 예정 게임을 한눈에 보세요!

📆 출시 예정 게임을 캘린더에 등록할 수 있어요!

🔔 매일 아침마다 오늘 어떤 게임이 출시되었는지 알려줘요!

👾 만약 내가 인디게임 개발자라면 겜린더에 무료로 게임을 등록할 수 있어요! (모바일 게임도 가능해요)

구글 플레이
앱 스토어

Github Repo 모음
겜린더 백엔드 : 링크
겜린더 게임 수집 봇 : 링크
겜린더 게임 출시 알림 자동화 : 링크

관련 글 (수시로 업데이트됩니다)
여러 개의 알림을 하나로 묶어서 보내기 - 2024-12-27

개발하면서 어려웠던 부분이나 기술적인 부분은 분량이 많을 것 같아
이번 글에선 간략하게 요약했습니다.`,
    author: "강문혁",
    likes: 18,
    comment: 0,
    tags: ["겜린더", "출시"],
    thumbnail: "/example3.jpg",
    createdDate: new Date(2024, 11, 12),
  },
  {
    id: 22,
    title: "useState의 내부 동작 원리",
    postDescription: "useState의 내부 동작 원리와 리렌더링 매커니즘 이해하기",
    content: `useState란?
컴포넌트에 state 변수를 추가할 수 있는 React Hook이다.

useState의 내부 동작 원리
내부 동작 원리를 파악하는 소스 코드는 React v19.0.0 버전의 코드입니다.

컴포넌트 초기 렌더링: useState 훅 초기화
// mountState의 내부 구현
function mountStateImpl<S>(initialState: (() => S) | S): Hook {
  const hook = mountWorkInProgressHook(); // 새로운 훅 객체 생성
  if (typeof initialState === "function") {
    // 초기 값이 함수인 경우
    // 초기 렌더링 시에만 이 함수가 호출되어 불필요한 계산을 방지한다.
    const initialStateInitializer = initialState;
    initialState = initialStateInitializer();
  }
  // 초기 상태 값을 훅의 memoizedState와 baseState에 저장
  hook.memoizedState = hook.baseState = initialState;
  
  // 상태 업데이트를 관리할 큐 객체 생성
  const queue: UpdateQueue<S, BasicStateAction<S>> = {
    pending: null, // 대기 중인 업데이트
    lanes: NoLanes, // 우선 순위
    dispatch: null, // 디스패치 함수
    lastRenderedReducer: basicStateReducer, // 마지막으로 렌더링된 리듀서
    lastRenderedState: (initialState: any), // 마지막으로 렌더링된 상태
  };
  hook.queue = queue;
  return hook; // 훅 객체 반환
}`,
    author: "우혁",
    likes: 31,
    comment: 0,
    tags: ["리액트", "useState"],
    thumbnail: "/example1.jpg",
    createdDate: new Date(2024, 11, 30),
  },
];
